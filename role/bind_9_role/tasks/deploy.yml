---

# Note: this Playbook deploys the actual configuration files,
#       and the zones
#       it can be used outside of the role as well
#
# You must specify $template

- name: /etc/bind/named.conf.options
  template:
    src: "{{ second }}/named.conf.options.j2"
    dest: /etc/bind/named.conf.options
    owner: root
    group: root
    mode: 0644
  notify:
    - reload bind9


- name: /etc/bind/named.conf.local
  template:
    src: "{{ second }}/named.conf.local.j2"
    dest: /etc/bind/named.conf.local
    owner: root
    group: root
    mode: 0644
  notify:
    - reload bind9


- name: copy bind keys
  template:
    src: "{{ item }}"
    dest: /etc/bind/
    owner: bind
    group: bind
    mode: 0640
  with_fileglob:
    - "{{ second }}/keys/*.key"
  notify:
    - reload bind9


- name: Clear variable
  set_fact:
    changed_zones: "[]"
  run_once: true


- name: copy bind zones
  include: "./roles/bind_9_role/tasks/update-zone.yml zone_file={{ item }} bind_target_dir=/etc/bind/"
  with_fileglob:
    - "{{ second }}/zones/*.zone"
  notify:
    - reload bind9


# deploy dynamic zones - only if the local directory exists
- name: Check if local directory for dynamic zones exists
  local_action:
    module: stat
    path: "{{ second }}/dynamic-zones/"
    get_md5: no
    mime: no
  become: no
  register: dynamic_zones


- block:
  - name: Create dynamic-updates directory
    file:
      path: "/etc/bind/dynamic-updates"
      state: directory
      owner: bind
      group: bind
      mode: 0770


  - name: copy dynamic bind zones
    include: "{{ role_path }}/tasks/update-dynamic-zone.yml dynamic_zone_file={{ item }}"
    with_fileglob:
      - "{{ second }}/dynamic-zones/*.zone"
    notify:
      - reload bind9

  when: dynamic_zones.stat.exists == True


- name: Show list of changed zones
  debug: msg="{{ changed_zones | list | unique }}"



- meta: flush_handlers
